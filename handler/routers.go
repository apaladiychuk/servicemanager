/*
 * Service manager- openapi 3.0.0
 *
 * Test task service manager
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package handler

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"servicemanager/model"
)

type HandlerFunc func(c *gin.Context) error

//type Route struct {
//	Name        string
//	Method      string
//	Pattern     string
//	HandlerFunc http.HandlerFunc
//}
//
//type Routes []Route

func InitEngine() *gin.Engine {
	router := gin.Default()
	router.Use(gin.Recovery())
	return router
}

func HandlerErrorFunc(f HandlerFunc) gin.HandlerFunc {
	return func(c *gin.Context) {
		err := f(c)
		if err != nil {
			if ew, ok := err.(model.Errors); ok {
				c.JSON(int(ew.Code), model.ErrorResponse{
					Status: int(ew.Code),
					Error:  ew.Message,
				})
				if ew.Original != nil {
					logrus.Error(ew.Original.Error())
				}
			} else {
				c.JSON(http.StatusInternalServerError, model.ErrorResponse{
					Status: 500,
					Error:  err.Error(),
				})
				logrus.Error(err.Error())
			}
		}
	}
}

func SuccessResult(c *gin.Context, status int, data interface{}) error {
	c.JSON(status, model.RestResponse{
		Status: status,
		Error:  "",
		Data:   data,
	})
	return nil
}
