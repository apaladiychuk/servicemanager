/*
 * Service manager- openapi 3.0.0
 *
 * Test task service manager
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package handler

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"servicemanager/model"
)

type ResponseResult struct {
	Detail string
}

func GetServiceStatus(c *gin.Context) {

}

func GetServices(c *gin.Context) {

	db := c.Keys["DB"].(map[int]*model.Service)

	var result []model.Service

	for _, v := range db {
		result = append(result, model.Service{
			PID:         v.PID,
			CommandName: v.CommandName,
			StartTime:   v.StartTime,
			FinishTime:  v.FinishTime,
			Status:      v.Status,
		})
	}
	c.JSON(http.StatusOK, result)
}

func StartService(c *gin.Context) {
	var cmdRequest model.Command
	if err := c.BindJSON(&cmdRequest); err != nil {
		c.SecureJSON(http.StatusBadRequest, ResponseResult{Detail: err.Error()})
		return
	}
	if serv, err := model.StartCommand(cmdRequest.Command, cmdRequest.Args...); err != nil {
		c.SecureJSON(http.StatusNotAcceptable, ResponseResult{Detail: err.Error()})
		return
	} else {
		if serv.PID == 0 {
			c.SecureJSON(http.StatusNotAcceptable, ResponseResult{Detail: "Wrong Pid"})
			return

		}
		db := c.Keys["DB"].(map[int]*model.Service)
		db[serv.PID] = serv
		c.SecureJSON(http.StatusCreated, serv)
	}
}

func TerminateService(c *gin.Context) {

}
