/*
 * Service manager- openapi 3.0.0
 *
 * Test task service manager
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package model

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os/exec"
	"time"
)

// information about running command

type Service struct {
	PID int `json:"PID"`

	CommandName string     `json:"commandName,omitempty"`
	StartTime   *time.Time `json:"startTime,omitempty"`
	FinishTime  *time.Time `json:"finishTime,omitempty"`
	Stdout      []string   `json:"stdout,omitempty"`
	Stderr      []string   `json:"stderr,omitempty"`
	Status      string     `json:"status,omitempty"`
	Cmd         *exec.Cmd  `json:"-"`
	Cancel      func()     `json:"-"`
	Terminate   chan int   `json:"-"`
}

// start command on server
func StartCommand(command string, params ...string) (*Service, error) {
	ctx, cancel := context.WithCancel(context.Background())
	service := Service{
		CommandName: command,
		Cancel:      cancel,
		Cmd:         exec.CommandContext(ctx, command, params...),
	}
	service.ScanStderr()
	service.ScanStdout()

	if err := service.Cmd.Start(); err != nil {

		service.Status = fmt.Sprintf("Error start %s command : %v  ", command, err)
		log.Println(service.Status)
		return &service, nil
	} else {
		start := time.Now()
		service.StartTime = &start
		service.PID = service.Cmd.Process.Pid
		service.Status = "Running..."
		go service.OnFinish()
		return &service, nil
	}
}

// Run after command finished
func (s *Service) OnFinish() {
	if err := s.Cmd.Wait(); err != nil {
		s.Status = "Stop. err "
		s.Stdout = append(s.Stdout, fmt.Sprintf("Stop %s command : %v  ", s.CommandName, err))
		log.Println(s.Status)
	} else {
		s.Status = "Stop."
		s.Stdout = append(s.Stdout, fmt.Sprintf("Stop %s command : ok  ", s.CommandName))
		log.Println(s.Status)
	}
	finish := time.Now()
	s.FinishTime = &finish
}

// scan stdout
func (s *Service) ScanStdout() error {
	stdout, err := s.Cmd.StdoutPipe()
	scanner := bufio.NewScanner(stdout)
	if err != nil {
		log.Printf("[ERROR] open stdout %v \n", err)
		return err
	}
	go func() {
		for scanner.Scan() {
			line := scanner.Text()
			s.Stdout = append(s.Stdout, line)
		}
		log.Println("Stop stderr scaner ")
	}()
	return nil
}

// scan stderr
func (s *Service) ScanStderr() error {
	stderr, err := s.Cmd.StderrPipe()
	scanner := bufio.NewScanner(stderr)
	if err != nil {
		log.Printf("[ERROR] open stdout %v \n", err)
		return err
	}
	go func() {
		for scanner.Scan() {
			line := scanner.Text()
			s.Stderr = append(s.Stderr, line)
		}
		log.Println("Stop stderr scaner ")
	}()
	return nil
}
